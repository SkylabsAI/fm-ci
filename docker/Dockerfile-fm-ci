# BSD 3-Clause License (from https://github.com/coq-community/docker-base)
# (Not much is left from the original though.)
# https://github.com/coq-community/docker-base/blob/master/base/bare/Dockerfile
# https://github.com/coq-community/docker-base/blob/master/LICENSE

FROM debian:bookworm

SHELL ["/bin/bash", "--login", "-o", "pipefail", "-c"]

CMD ["/bin/bash", "--login"]

# Supports bash-isms better, for instance for cram tests
# (see https://bluerocksecurity.atlassian.net/browse/FM-4754)
RUN ln -sf bash /bin/sh

### Add Coq group and user with sudo perms ###################################

RUN groupadd -g 1008 coq \
 && useradd --no-log-init -m -s /bin/bash -g coq -G sudo -p '' -u 1008 coq

### Install uv

COPY --from=ghcr.io/astral-sh/uv:0.9.5 /uv /uvx /bin/

### Install system packages ##################################################

ENV DEBIAN_FRONTEND=noninteractive

# hadolint ignore=DL3008
RUN cat /proc/cpuinfo /proc/meminfo \
 && apt-get update -y -q \
 && apt-get install -y -q --no-install-recommends autoconf automake \
      build-essential ca-certificates curl git less libgmp-dev m4 \
      openssh-client pkg-config rlwrap rsync sudo time unzip ninja-build \
      libffi-dev zlib1g-dev bsdmainutils git-lfs m4 zip cmake linux-perf \
      moreutils python3-pip python3-venv python3-setuptools bear \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# Ensure a /usr/bin/perf binary exists; we bind-mount over this the correct
# version from the host.
RUN touch /usr/bin/perf

WORKDIR /home/coq
USER coq

RUN mkdir -p -v /home/coq/bin /home/coq/.local/bin

# config
ENV PATH="/home/coq/.local/bin:${PATH}"

# Dune config
COPY --chown=coq files/dune-config /home/coq/.config/dune/config
RUN git config --global --add safe.directory '*'

### Install Rust

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y

### Install python dependencies ##############################################
#
COPY files/python_deps.txt /tmp/files/python_deps.txt

RUN python3 -m venv .pyenv \
 && ./.pyenv/bin/python -m pip install \
 -r /tmp/files/python_deps.txt \
 && echo ". ~/.pyenv/bin/activate" >> .profile

### Prepare the opam switch ##################################################

ENV OPAM_VERSION="2.4.1"
ENV NJOBS="6"
ENV OPAMPRECISETRACKING="1"

RUN set -x \
  && echo "/home/coq/.local/bin" \
  |  bash -c "sh <(curl -fsSL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)"

COPY files/_br-fm-deps.opam /tmp/files/br-fm-deps.opam
COPY files/_dune-project /tmp/files/dune-project
COPY files/opam-clean /tmp/files/opam-clean

RUN set -x \
 && opam init --bare --disable-sandboxing --shell-setup \
 && opam repo add --dont-select archive "git+https://github.com/ocaml/opam-repository-archive" \
 && opam switch create --empty --repositories=default,archive main \
 && opam update -y \
 && opam install -y /tmp/files/br-fm-deps.opam \
 && /tmp/files/opam-clean

### Image versioning environment setup ########################################################

# ARG BR_FMDEPS_VERSION
# RUN test -n "${BR_FMDEPS_VERSION}"

# ARG BR_IMAGE_VERSION
# RUN test -n "${BR_IMAGE_VERSION}"

# ENV DOCKER_IMAGE_VERSION="fmdeps.${BR_FMDEPS_VERSION},image.${BR_IMAGE_VERSION}"

ARG DOCKER_IMAGE_VERSION
ENV DOCKER_IMAGE_VERSION="${DOCKER_IMAGE_VERSION}"
