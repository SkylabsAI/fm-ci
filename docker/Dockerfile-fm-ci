# BSD 3-Clause License (from https://github.com/coq-community/docker-base)
# (Not much is left from the original though.)
# https://github.com/coq-community/docker-base/blob/master/base/bare/Dockerfile
# https://github.com/coq-community/docker-base/blob/master/LICENSE

FROM debian:bookworm

SHELL ["/bin/bash", "--login", "-o", "pipefail", "-c"]

### Install system packages ##################################################

ENV DEBIAN_FRONTEND=noninteractive

# hadolint ignore=DL3008
RUN cat /proc/cpuinfo /proc/meminfo \
 && apt-get update -y -q \
 && apt-get install -y -q --no-install-recommends autoconf automake \
      build-essential ca-certificates curl git less libgmp-dev m4 \
      openssh-client pkg-config rlwrap rsync sudo time unzip ninja-build \
      libffi-dev zlib1g-dev bsdmainutils git-lfs m4 zip cmake linux-perf \
      moreutils python3-pip python3-venv python3-setuptools bear \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# Supports bash-isms better, for instance for cram tests
# (see https://bluerocksecurity.atlassian.net/browse/FM-4754)
RUN ln -sf bash /bin/sh

### Add Coq group and user with sudo perms ###################################

RUN groupadd -g 1008 coq \
 && useradd --no-log-init -m -s /bin/bash -g coq -G sudo -p '' -u 1008 coq \
 && mkdir -p -v /home/coq/bin /home/coq/.local/bin \
 && chown coq:coq /home/coq/bin /home/coq/.local /home/coq/.local/bin

WORKDIR /home/coq
USER coq

ENV PATH="/home/coq/.local/bin:${PATH}"

### Prepare the opam switch ##################################################

ENV OPAM_VERSION="2.2.1"
ENV NJOBS="6"
ENV OPAMPRECISETRACKING="1"

RUN set -x \
  && echo "/home/coq/.local/bin" \
  |  bash -c "sh <(curl -fsSL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)"

COPY files/_br-fm-deps.opam /tmp/files/br-fm-deps.opam
COPY files/_dune-project /tmp/files/dune-project
COPY files/opam-clean /tmp/files/opam-clean

RUN set -x \
 && opam init --bare --disable-sandboxing --shell-setup \
 && opam repo add --dont-select coq-released "https://coq.inria.fr/opam/released" \
 && opam repo add --dont-select iris-dev "git+https://gitlab.mpi-sws.org/iris/opam.git" \
 && opam repo add --dont-select archive "git+https://github.com/ocaml/opam-repository-archive" \
 && opam switch create --empty --repositories=iris-dev,default,coq-released,archive main \
 && opam update -y \
 && opam install -y /tmp/files/br-fm-deps.opam \
 && /tmp/files/opam-clean

### Install python dependencies ##############################################
#
COPY files/python_deps.txt /tmp/files/python_deps.txt
COPY files/fmdocs_python_deps.txt /tmp/files/fmdocs_python_deps.txt

RUN python3 -m venv .pyenv \
 && ./.pyenv/bin/python -m pip install \
 -r /tmp/files/python_deps.txt \
 -r /tmp/files/fmdocs_python_deps.txt \
 && echo ". ~/.pyenv/bin/activate" >> .profile

# Ensure a /usr/bin/perf binary exists; we bind-mount over this the correct
# version from the host.
RUN sudo touch /usr/bin/perf

### Install uv

COPY --from=ghcr.io/astral-sh/uv:0.6.4 /uv /uvx /bin/

### Install Rust

RUN curl https://sh.rustup.rs -sSf | sh -s -- -y

### Install LLVM #############################################################

ARG BR_LLVM_MAJ_VER
RUN test -n "${BR_LLVM_MAJ_VER}"

ENV LLVM_VER=${BR_LLVM_MAJ_VER}

RUN echo "deb [trusted=yes] http://apt.llvm.org/bookworm/ llvm-toolchain-bookworm-${LLVM_VER} main" \
  | sudo tee -a /etc/apt/sources.list.d/llvm.list

RUN sudo apt-get update -qy \
 && sudo apt-get install -y \
      llvm-${LLVM_VER} libllvm${LLVM_VER} llvm-${LLVM_VER}-dev \
      llvm-${LLVM_VER}-runtime clang-${LLVM_VER} clang-tools-${LLVM_VER} \
      libclang-common-${LLVM_VER}-dev libclang-${LLVM_VER}-dev \
      libclang1-${LLVM_VER} lld-${LLVM_VER} libc++-${LLVM_VER}-dev \
 && sudo apt-get clean \
 && sudo rm -rf /var/lib/apt/lists/*

# Provide standardized location for llvm
RUN sudo ln -s /usr/lib/llvm-${LLVM_VER} /usr/lib/llvm

RUN sudo ln -s /usr/lib/llvm/bin/clang++ /usr/bin/
RUN sudo ln -s ld.lld-${LLVM_VER} /usr/bin/ld.lld

### Environment setup ########################################################

ARG BR_FMDEPS_VERSION
RUN test -n "${BR_FMDEPS_VERSION}"

ARG BR_IMAGE_VERSION
RUN test -n "${BR_IMAGE_VERSION}"

ENV DOCKER_IMAGE_VERSION="fmdeps.${BR_FMDEPS_VERSION},llvm.${LLVM_VER},image.${BR_IMAGE_VERSION}"

RUN git config --global --add safe.directory '*'
ENV llvm_base_dir=/usr/lib/llvm/bin
ENV LLVM_BASE_DIR=${llvm_base_dir}/
ENV CC=${LLVM_BASE_DIR}clang
ENV CXX=${LLVM_BASE_DIR}clang++
# Set PATH for both interactive and scripted users.
ENV PATH=${llvm_base_dir}:"$PATH"
RUN echo PATH=${llvm_base_dir}:'"$PATH"' >> ~coq/.profile

CMD ["/bin/bash", "--login"]

# Dune config
COPY --chown=coq files/dune-config /home/coq/.config/dune/config
