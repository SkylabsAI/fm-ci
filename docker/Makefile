REGISTRY ?= registry.gitlab.com
BR_REGISTRY ?= $(REGISTRY)/bedrocksystems/formal-methods/fm-ci
BR_FMDEPS_VERSION ?= 2025-01-21
# Bump the following number when pushing new images with the same version
# numbers. This is necessary to properly invalidate the NOVA cache.
BR_IMAGE_VERSION ?= 1
LLVM_VERSIONS ?= 16 17 18 19
LLVM_MAIN_VERSION ?= 18
SWIPL_VERSIONS ?= 9.0.4 9.1.8 9.2.7 9.3.8
SWIPL_MAIN_VERSION ?= 9.2.7
I_KNOW_WHAT_I_AM_DOING ?= no
QUIET ?= true

# Checking the value of I_KNOW_WHAT_I_AM_DOING.
ifneq ($(I_KNOW_WHAT_I_AM_DOING),yes)
ifneq ($(I_KNOW_WHAT_I_AM_DOING),no)
$(error I_KNOW_WHAT_I_AM_DOING should be either "yes" or "no")
endif
endif

# Support for quiet build.
ifeq ($(QUIET),true)
Q := @
else
ifeq ($(QUIET),false)
Q :=
else
$(error QUIET should be either "true" or "false")
endif
endif

# Support for colors.
CYAN = 36
define color
	"\033[0;$1m$2\033[0m"
endef

all:
	@echo -e $(call color,$(CYAN),See README.md for documentation.)
.PHONY: all

files/br-fm-deps.opam: ../fm-deps/dune-project
	$(Q)dune b --no-print-directory --display=quiet ../fm-deps/br-fm-deps.opam
	$(Q)cp ../fm-deps/br-fm-deps.opam files/br-fm-deps.opam

DOCKER_BUILD_TARGETS =
DOCKER_RUN_TARGETS =
DOCKER_PUSH_TARGETS =

define image-target
fm-$$(BR_FMDEPS_VERSION)-swipl-$1-llvm-$2: Dockerfile-fm-ci files/br-fm-deps.opam
	@echo "[DOCKER] Building $$@"
	$$(Q)docker buildx build --pull \
		--platform linux/amd64 \
		-t $$(BR_REGISTRY):$$@ \
		--build-arg BR_FMDEPS_VERSION=$$(BR_FMDEPS_VERSION) \
		--build-arg BR_IMAGE_VERSION=$$(BR_IMAGE_VERSION) \
		--build-arg BR_SWIPL_VERSION=$1 \
		--build-arg BR_LLVM_MAJ_VER=$2 \
		-f $$< .
.PHONY: fm-$$(BR_FMDEPS_VERSION)-swipl-$1-llvm-$2
DOCKER_BUILD_TARGETS += fm-$$(BR_FMDEPS_VERSION)-swipl-$1-llvm-$2

run-fm-$$(BR_FMDEPS_VERSION)-swipl-$1-llvm-$2: fm-$$(BR_FMDEPS_VERSION)-swipl-$1-llvm-$2
	@echo "[DOCKER] Running $$<"
	$$(Q)docker run -i -t $$(BR_REGISTRY):$$<
.PHONY: run-fm-$$(BR_FMDEPS_VERSION)-swipl-$1-llvm-$2
DOCKER_RUN_TARGETS += run-fm-$$(BR_FMDEPS_VERSION)-swipl-$1-llvm-$2

push-fm-$$(BR_FMDEPS_VERSION)-swipl-$1-llvm-$2: fm-$$(BR_FMDEPS_VERSION)-swipl-$1-llvm-$2
	@echo "[DOCKER] Pushing $$<"
ifeq ($(I_KNOW_WHAT_I_AM_DOING),yes)
	@echo "(Let's hope you did not mess anything up...)"
	$$(Q)docker push $$(BR_REGISTRY):$$<
else
	@echo "The command that would run would be:"
	@echo "  docker push $$(BR_REGISTRY):$$<"
	@echo -e $(call color,$(CYAN),Use I_KNOW_WHAT_I_AM_DOING=yes to actually run it)
endif
.PHONY: push-fm-$$(BR_FMDEPS_VERSION)-swipl-$1-llvm-$2
DOCKER_PUSH_TARGETS += push-fm-$$(BR_FMDEPS_VERSION)-swipl-$1-llvm-$2
endef

$(foreach llvm,$(LLVM_VERSIONS),\
	$(eval $(call image-target,$(SWIPL_MAIN_VERSION),$(llvm))))
$(foreach swipl,$(filter-out $(SWIPL_MAIN_VERSION),$(SWIPL_VERSIONS)),\
	$(eval $(call image-target,$(swipl),$(LLVM_MAIN_VERSION))))

build: $(DOCKER_BUILD_TARGETS)
.PHONY: build

push: build $(DOCKER_PUSH_TARGETS)
.PHONY: push

list-targets:
	@echo "$(DOCKER_BUILD_TARGETS)" | tr ' ' '\n' | sort -V
	@echo "$(DOCKER_RUN_TARGETS)" | tr ' ' '\n' | sort -V
	@echo "$(DOCKER_PUSH_TARGETS)" | tr ' ' '\n' | sort -V
.PHONY: list-targets

DEFAULT_TAG := fm-$(BR_FMDEPS_VERSION)-swipl-$(SWIPL_MAIN_VERSION)-llvm-$(LLVM_MAIN_VERSION)

tag-default: $(DEFAULT_TAG)
	@echo "[DOCKER] Tagging $< as fm-default"
	@docker image tag $(BR_REGISTRY):$< $(BR_REGISTRY):fm-default
.PHONY: tag-default

run-default: tag-default
	@echo "[DOCKER] Running fm-default"
	$(Q)docker run -i -t $(BR_REGISTRY):fm-default
.PHONY: run-default

push-default: tag-default
	@echo "[DOCKER] Pusing tag fm-default"
ifeq ($(I_KNOW_WHAT_I_AM_DOING),yes)
	@echo "(Let's hope you did not mess anything up...)"
	$(Q)docker push $(BR_REGISTRY):fm-default
else
	@echo "The command that would run would be:"
	@echo "  docker push $(BR_REGISTRY):fm-default"
	@echo -e $(call color,$(CYAN),Use I_KNOW_WHAT_I_AM_DOING=yes to actually run it)
endif

.PHONY: push-default

gitlab-login:
	@echo -n "Enter your GitLab login: "
	@read -r LOGIN; echo $$LOGIN > $@

gitlab-token:
	@echo -e $(call color,$(CYAN),You need a GitLab API token.)
	@echo "See https://gitlab.com/-/user_settings/personal_access_tokens."
	@echo -n "Enter your GitLab API token: "
	@read -r TOKEN; echo $$TOKEN > $@

login: gitlab-login gitlab-token
	$(Q)docker login -u $$(cat $<) --password-stdin $(REGISTRY) < gitlab-token
.PHONY: login

logout:
	$(Q)docker logout $(REGISTRY)
.PHONY: logout

ARTIFACT_JOB := https://gitlab.com/api/v4/projects/59374913/jobs/artifacts
ARTIFACT_URL := $(ARTIFACT_JOB)/trigger-default/download?job=gen-installed-artifact
ifndef CI_JOB_TOKEN
HEADER_DEPS := gitlab-token
HEADER := "PRIVATE-TOKEN: $$(cat gitlab-token)"
else
HEADER_DEPS :=
HEADER := "JOB-TOKEN: $(CI_JOB_TOKEN)"
endif

files/fm-artifact.zip: $(HEADER_DEPS)
	@echo -e $(call color,$(CYAN),Downloading the artifact...)
	@curl --show-error --location --output $@ --header $(HEADER) $(ARTIFACT_URL)

build-release-dev: files/fm-artifact.zip
	@echo "[DOCKER] Building fm-release"
	$(Q)docker buildx build --pull -t $(BR_REGISTRY):fm-release \
		--build-arg BASE_IMAGE=$(BR_REGISTRY):fm-default -f Dockerfile-release-dev .
.PHONY: build-release-dev

build-release:
	@echo "[DOCKER] Building fm-release-opt"
	$(Q)docker buildx build --pull -t $(BR_REGISTRY):fm-release \
		--build-arg BASE_IMAGE=$(BR_REGISTRY):fm-default \
		--build-arg HEADER=$(HEADER) \
		--build-arg ARTIFACT_URL=$(ARTIFACT_URL) \
		-f Dockerfile-release-opt .
.PHONY: build-release

run-release: build-release
	@echo "[DOCKER] Running fm-release"
	$(Q)docker run -i -t $(BR_REGISTRY):fm-release
.PHONY: run-release

push-release: build-release
	@echo "[DOCKER] Pusing fm-release"
ifeq ($(I_KNOW_WHAT_I_AM_DOING),yes)
	@echo "(Let's hope you did not mess anything up...)"
	$(Q)docker push $(BR_REGISTRY):fm-release
else
	@echo "The command that would run would be:"
	@echo "  docker push $(BR_REGISTRY):fm-release"
	@echo -e $(call color,$(CYAN),Use I_KNOW_WHAT_I_AM_DOING=yes to actually run it)
endif

.PHONY: push-release

clean:
	@rm -f files/br-fm-deps.opam files/fm-artifact.zip
.PHONY: clean

clean-all: clean
	@rm -f gitlab-token gitlab-login
.PHONY: clean-token

system-prune:
	@docker system prune
.PHONY: system-prune
